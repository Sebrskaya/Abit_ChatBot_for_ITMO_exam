# tools.py
from langchain.tools import BaseTool
from pydantic import Field
from typing import Type
import re

class CourseRecommenderTool(BaseTool):
    name: str = "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è_–∫—É—Ä—Å–æ–≤"
    description: str = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤—ã–±–æ—Ä–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ–ø—ã—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, —Ü–µ–ª–∏ (ML Engineer, Data Analyst –∏ —Ç.–¥.)"
    background: str = Field(default="")

    def _run(self, query: str) -> str:
        query_lower = query.lower()
        skills = []
        goals = []

        if any(x in query_lower for x in ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "python", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "coding"]):
            skills.append("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if any(x in query_lower for x in ["–¥–∞–Ω–Ω—ã–µ", "–∞–Ω–∞–ª–∏–∑", "data", "sql", "–∞–Ω–∞–ª–∏—Ç–∏–∫"]):
            skills.append("—Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏")
        if any(x in query_lower for x in ["–ø—Ä–æ–¥—É–∫—Ç", "product", "–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "–±–∏–∑–Ω–µ—Å"]):
            skills.append("–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –±—ç–∫–≥—Ä–∞—É–Ω–¥")
        if any(x in query_lower for x in ["ml", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]):
            skills.append("ML/AI")

        if "ml engineer" in query_lower or "–º–ª –∏–Ω–∂–µ–Ω–µ—Ä" in query_lower:
            goals.append("ML Engineer")
        if "data analyst" in query_lower or "–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö" in query_lower:
            goals.append("Data Analyst")
        if "ai product" in query_lower or "–ø—Ä–æ–¥—É–∫—Ç" in query_lower:
            goals.append("AI Product Developer")
        if "data engineer" in query_lower or "–∏–Ω–∂–µ–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö" in query_lower:
            goals.append("Data Engineer")

        recommendations = []

        if "ML Engineer" in goals:
            recommendations.append("- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–∞—à–∏–Ω–Ω—ã–π –æ–±—É—á–µ–Ω–∏–µ (Advanced ML)")
            recommendations.append("- –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ (Deep Learning)")
            recommendations.append("- MLOps –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
            recommendations.append("- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")

        if "Data Analyst" in goals:
            recommendations.append("- –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö (Big Data Analytics)")
            recommendations.append("- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("- A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–µ—Ç—Ä–∏–∫–∏")
            recommendations.append("- Python –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

        if "AI Product Developer" in goals:
            recommendations.append("- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏")
            recommendations.append("- UX –¥–ª—è AI-—Å–∏—Å—Ç–µ–º")
            recommendations.append("- –≠–∫–æ–Ω–æ–º–∏–∫–∞ AI –∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è")
            recommendations.append("- Agile –∏ Scrum –≤ AI-–ø—Ä–æ–µ–∫—Ç–∞—Ö")

        if "Data Engineer" in goals:
            recommendations.append("- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("- ETL/ELT –ø—Ä–æ—Ü–µ—Å—Å—ã")
            recommendations.append("- –†–∞–±–æ—Ç–∞ —Å Apache Spark, Kafka")
            recommendations.append("- –û–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (AWS, GCP)")

        return (
            f"–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞ ({', '.join(skills or ['–Ω–µ —É–∫–∞–∑–∞–Ω'])}) "
            f"–∏ —Ü–µ–ª–∏ ({', '.join(goals or ['–Ω–µ —É–∫–∞–∑–∞–Ω–∞'])}), —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n"
            + "\n".join(recommendations or ["–£—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –±—ç–∫–≥—Ä–∞—É–Ω–¥ –∏ —Ü–µ–ª–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."])
        )

class ProgramComparatorTool(BaseTool):
    name: str = "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_–ø—Ä–æ–≥—Ä–∞–º–º"
    description: str = "–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' –∏ 'AI Product' –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: —Ñ–æ–∫—É—Å, –∫–∞—Ä—å–µ—Ä–∞, –ø–∞—Ä—Ç–Ω–µ—Ä—ã, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è."
    retriever: any = None

    def __init__(self, retriever, **kwargs):
        super().__init__(**kwargs)
        self.retriever = retriever

    def _run(self, query: str) -> str:
        comparison = """
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º:

üîπ **–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (AI)**:
- –§–æ–∫—É—Å: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ML-–∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
- –ö–∞—Ä—å–µ—Ä–∞: ML Engineer, Data Scientist, Researcher.
- –ü–∞—Ä—Ç–Ω—ë—Ä—ã: Sber AI, X5, Ozon Bank, –ú–¢–°, –Ø–Ω–¥–µ–∫—Å.
- –ü–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º, –∫—Ç–æ —Ö–æ—á–µ—Ç –≥–ª—É–±–æ–∫–æ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ ML –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–µ–ª–µ–π.

üîπ **AI Product**:
- –§–æ–∫—É—Å: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ AI-–ø—Ä–æ–¥—É–∫—Ç–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
- –ö–∞—Ä—å–µ—Ä–∞: AI Product Manager, Product Developer, Tech Lead.
- –ü–∞—Ä—Ç–Ω—ë—Ä—ã: Napoleon IT, Raft, Genotek, AIRI.
- –ü–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏.

üí° –°–æ–≤–µ—Ç: –í—ã–±–µ—Ä–∏—Ç–µ 'AI', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ 'AI Product', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.
        """
        return comparison